Obsolete
initializeMoveToolSelection
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Move Tool Select'; instVarAt: 3 put: '[:tool :event | 
| drawing lastPoint figure figures | 
drawing := tool drawing.
tool controller model entityForManipulation =#any
	ifTrue:[lastPoint := tool cursorPointFor: event.
			tool valueAt: #lastPoint put: lastPoint.
			figure := drawing figureAt: lastPoint.
			(figure class = Refactory.HotDraw.TrackHandle or: [(figure class = Refactory.HotDraw.IndexedTrackHandle)])
				ifFalse:[
					tool sensor shiftDown
						ifTrue: [drawing toggleSelection: figure]
						ifFalse: [(drawing isSelected: figure) ifFalse: [drawing selection: figure] ifTrue:[drawing toggleSelection: figure]]]]

	ifFalse:[
	figures := tool allFiguresAtEvent: event.
	figures := figures select:[: f| f model entity class name = tool controller model entityForManipulation].
	figures isEmpty
		ifFalse:[
			tool sensor shiftDown
					ifTrue: [figures do:[:fig| drawing toggleSelection: fig]]
					ifFalse: [drawing selection: nil]]
		ifTrue:[
			tool sensor shiftDown
					ifTrue: []
					ifFalse: []]
		]
]'; instVarAt: 4 put: (Core.Point x: 46 y: 50); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Move Figure'; instVarAt: 3 put: '[:tool :event | 
| delta newPoint |
newPoint := tool cursorPointFor: event.
delta := newPoint - (tool valueAt: #lastPoint).
tool valueAt: #lastPoint put: newPoint.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isTranslatedBy: delta]]]'; instVarAt: 4 put: (Core.Point x: 229 y: 86); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 40 y: 284); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool isMovedTo'; instVarAt: 3 put: '[:tool :event | 
| newPoint |
newPoint := tool cursorPointFor: event.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isMovedTo: newPoint]]]'; instVarAt: 4 put: (Core.Point x: 228 y: 296); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Tool Select'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 145.112 y: 55.349); add: (Core.Point x: 203 y: 51); add: (Core.Point x: 266.601 y: 87.3309); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 339.393 y: 86.4081); add: (Core.Point x: 372 y: 36); add: (Core.Point x: 418 y: 36); add: (Core.Point x: 418 y: 89); add: (Core.Point x: 389.692 y: 95.436); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Tool Select'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 84.038 y: 81.9194); add: (Core.Point x: 81.6273 y: 283.404); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool isMovedTo'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 312.475 y: 117.53); add: (Core.Point x: 311.524 y: 295.158); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool isMovedTo'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 227.256 y: 313.793); add: (Core.Point x: 107.015 y: 304.622); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Move Tool Select'
		put:
			(ToolState
				name: 'Move Tool Select'
				command:
					[:tool :event | 
					| drawing lastPoint figure figures |
					drawing := tool drawing.
					tool controller model entityForManipulation = #any
						ifTrue:
							[lastPoint := tool cursorPointFor: event.
							tool valueAt: #lastPoint put: lastPoint.
							figure := drawing figureAt: lastPoint.
							(figure class = TrackHandle or: [figure class = IndexedTrackHandle])
								ifFalse:
									[tool sensor shiftDown
										ifTrue: [drawing toggleSelection: figure]
										ifFalse:
											[(drawing isSelected: figure)
												ifFalse: [drawing selection: figure]
												ifTrue: [drawing toggleSelection: figure]]]]
						ifFalse:
							[figures := tool allFiguresAtEvent: event.
							figures := figures
								select:
									[:f | f model entity class name = tool controller model entityForManipulation].
							figures isEmpty
								ifFalse:
									[tool sensor shiftDown
										ifTrue: [figures do: [:fig | drawing toggleSelection: fig]]
										ifFalse: [drawing selection: nil]]
								ifTrue:
									[tool sensor shiftDown
										ifTrue: []
										ifFalse: []]]]).
	Tool states
		at: 'Selection Tool Move Figure'
		put:
			(ToolState
				name: 'Selection Tool Move Figure'
				command:
					[:tool :event | 
					| delta newPoint |
					newPoint := tool cursorPointFor: event.
					delta := newPoint - (tool valueAt: #lastPoint).
					tool valueAt: #lastPoint put: newPoint.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isTranslatedBy: delta]]]).
	Tool states
		at: 'End State'
		put:
			(EndToolState
				name: 'End State'
				command: [:tool :event | ]).
	Tool states
		at: 'Selection Tool isMovedTo'
		put:
			(ToolState
				name: 'Selection Tool isMovedTo'
				command:
					[:tool :event | 
					| newPoint |
					newPoint := tool cursorPointFor: event.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isMovedTo: newPoint]]]).
	(Tool stateFor: 'Move Tool Select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'Move Tool Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Selection Tool isMovedTo')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool isMovedTo');
				yourself)