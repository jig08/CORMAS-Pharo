tool states
initializeManipulateTool
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Manipulate Tool'; instVarAt: 3 put: '[:tool :event |
	tool cursor: Cursor fingerPointer.
	tool controller 
		ifNotNil:[tool controller model createInstancesController 
					ifNotNil:[tool controller model createInstancesController closeWithSpaceInterface]]]'; instVarAt: 4 put: (Core.Point x: 289 y: 5); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | 
|  figures aPoint|

aPoint := tool cursorPointFor: event.
figures := tool allFiguresAtEvent: event.
		tool controller processManipulateMenuAt: event globalPoint
		local: aPoint
		forSelectedFigures: (tool drawing selections )
		localFigures:figures]'; instVarAt: 4 put: (Core.Point x: 746 y: 219); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isEntityForManipulationDefined'; instVarAt: 3 put: '[:tool :event |  
tool controller isNil 
	ifTrue:[ tool valueAt: #condition put: true]
	ifFalse:[
		tool controller model entityForManipulation isNil
			ifTrue:[ tool valueAt: #condition put: false]
			ifFalse:[tool valueAt: #condition put: true]]]'; instVarAt: 4 put: (Core.Point x: 246 y: 73); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'setEntityForManipulationToDefault'; instVarAt: 3 put: '[:tool :event | 
tool controller model setEntityForManipulationToDefault ]'; instVarAt: 4 put: (Core.Point x: 2 y: 131); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'nothing'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 304 y: 169); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isShiftDown'; instVarAt: 3 put: '[:tool :event |
tool sensor shiftDown
			ifTrue:[ tool valueAt: #condition put: true]
			ifFalse:[tool valueAt: #condition put: false]]'; instVarAt: 4 put: (Core.Point x: 227 y: 291); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Multiple Select'; instVarAt: 3 put: '[:tool :event | 
| drawing  figure figures | 
drawing := tool drawing.
tool controller model entityForManipulation =#any
	ifTrue:[figure := tool figureAtEvent: event.
			(figure class = Refactory.HotDraw.TrackHandle or: [(figure class = Refactory.HotDraw.IndexedTrackHandle)])
				ifFalse:[drawing toggleSelection: figure]]

	ifFalse:[figures := tool allFiguresAtEvent: event.
			figures := figures select:[: f| f model entity class name = tool controller model entityForManipulation].
	figures isEmpty
		ifFalse:[figures do:[:fig|
					drawing toggleSelection: fig]]
		
		]
]'; instVarAt: 4 put: (Core.Point x: 194 y: 393); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 231 y: 577); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Move Figure'; instVarAt: 3 put: '[:tool :event | 
| delta newPoint |
newPoint := tool cursorPointFor: event.
delta := newPoint - (tool valueAt: #lastPoint).
tool valueAt: #lastPoint put: newPoint.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isTranslatedBy: delta]]]'; instVarAt: 4 put: (Core.Point x: 622 y: 501); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool isMovedTo'; instVarAt: 3 put: '[:tool :event | 
| newPoint |
newPoint := tool cursorPointFor: event.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isMovedTo: newPoint]].
tool drawing clearSelections]'; instVarAt: 4 put: (Core.Point x: 596 y: 578); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Move Tool Select'; instVarAt: 3 put: '[:tool :event | 
|  lastPoint   | 
lastPoint := tool cursorPointFor: event.
tool valueAt: #lastPoint put: lastPoint.
	]'; instVarAt: 4 put: (Core.Point x: 699 y: 410); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isClicOnSelectedFigure'; instVarAt: 3 put: '[:tool :event | 
(tool drawing selections isEmpty not and:[(tool allFiguresAtEvent: event) 
contains:[:fig | tool drawing selections includes: fig]])
	ifTrue:[tool valueAt: #condition put: true]
	ifFalse:[tool valueAt: #condition put: false]]	'; instVarAt: 4 put: (Core.Point x: 407 y: 327); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Simple Select'; instVarAt: 3 put: '[:tool :event | 
| figures | 
figures := (tool allFiguresAtEvent: event).
tool controller model entityForManipulation =#any
	ifFalse:[ figures := figures select:[: f| f model entity class name = tool controller model entityForManipulation]].
figures isEmpty ifFalse:[tool drawing selection: figures last]]'; instVarAt: 4 put: (Core.Point x: 353 y: 433); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Multiple Move Select'; instVarAt: 3 put: '[:tool :event | 
| drawing  figure figures | 
drawing := tool drawing.
tool controller model entityForManipulation =#any
	ifTrue:[figure := tool figureAtEvent: event.
			(figure class = Refactory.HotDraw.TrackHandle or: [(figure class = Refactory.HotDraw.IndexedTrackHandle)])
				ifFalse:[drawing toggleSelection: figure]]

	ifFalse:[figures := tool allFiguresAtEvent: event.
			figures := figures select:[: f| f model entity class name = tool controller model entityForManipulation].
	figures isEmpty
		ifFalse:[figures do:[:fig|
					(drawing selections includes: fig) ifFalse:[drawing toggleSelection: fig]]]
		
		]
]'; instVarAt: 4 put: (Core.Point x: 10 y: 418); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'change color menu'; instVarAt: 3 put: '[:tool :event | 
| aPoint|

aPoint := tool cursorPointFor: event.
tool controller processChangeFigureMenuAt: aPoint
	forSelectedFigures: (tool drawing selections )]'; instVarAt: 4 put: (Core.Point x: 635 y: 113); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'reOpenEntitySelectionDialog'; instVarAt: 3 put: '[:tool :event |
| keepSelected |
tool controller model chooseEntityForManipulation.
(tool drawing selections isEmpty not and:[tool controller model entityForManipulation ~=#any])
	ifTrue:[	keepSelected := tool drawing selections select:[:f| f entityType name = tool controller model entityForManipulation].
			tool drawing clearSelections.
			keepSelected do:[:fig| tool drawing toggleSelection: fig]]]'; instVarAt: 4 put: (Core.Point x: 30 y: 223); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'clear selection'; instVarAt: 3 put: '[:tool :event | 
tool drawing clearSelections]'; instVarAt: 4 put: (Core.Point x: 536 y: 94); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isManipulateForTabletEnabled'; instVarAt: 3 put: '[:tool :event | 
tool valueAt: #condition put: false.
tool controller ifNotNil:[:c | c model isManipulateForTabletEnabled
ifTrue:[tool valueAt: #condition put: true]]]
'; instVarAt: 4 put: (Core.Point x: 536 y: 22); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'ManipulateForTablet Tool'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 757 y: 41); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isClicOnSelectedFigure2'; instVarAt: 3 put: '[:tool :event | 
(tool drawing selections isEmpty not and:[(tool allFiguresAtEvent: event) 
contains:[:fig | tool drawing selections includes: fig]])
	ifTrue:[tool valueAt: #condition put: true]
	ifFalse:[tool valueAt: #condition put: false]]	'; instVarAt: 4 put: (Core.Point x: 441 y: 233); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Reselect'; instVarAt: 3 put: '[:tool :event | 
| drawing  entityForManipulation figures | 
drawing := tool drawing.
entityForManipulation := tool controller model entityForManipulation.
drawing clearSelections.
figures := tool allFiguresAtEvent: event.
entityForManipulation ~=#any  ifTrue:[ figures := figures select:[: f| f model entity class name = entityForManipulation]].
figures isEmpty 	ifFalse:[figures do:[:fig| drawing toggleSelection: fig]]]'; instVarAt: 4 put: (Core.Point x: 650 y: 322); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isEntityForManipulationDefined'); to: (stateTable at: 'setEntityForManipulationToDefault'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 264.327 y: 99.0529); add: (Core.Point x: 151.058 y: 131.284); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isEntityForManipulationDefined'); to: (stateTable at: 'nothing'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 330.517 y: 104.745); add: (Core.Point x: 336.291 y: 168.206); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'setEntityForManipulationToDefault'); to: (stateTable at: 'nothing'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 175.767 y: 158.508); add: (Core.Point x: 324.891 y: 168.25); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'isShiftDown'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 357.225 y: 180.415); add: (Core.Point x: 287.988 y: 291.667); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isShiftDown'); to: (stateTable at: 'Multiple Select'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 259.351 y: 322.512); add: (Core.Point x: 240.01 y: 392.263); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 768.166 y: 505.437); add: (Core.Point x: 852 y: 465); add: (Core.Point x: 866 y: 529); add: (Core.Point x: 782.608 y: 522.862); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool isMovedTo'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 705.003 y: 532.598); add: (Core.Point x: 700.544 y: 577.88); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool isMovedTo'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 596.396 y: 590.41); add: (Core.Point x: 299.651 y: 591.511); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Tool Select'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 763.756 y: 441.657); add: (Core.Point x: 726.222 y: 500.459); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isShiftDown'); to: (stateTable at: 'isClicOnSelectedFigure'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 290.922 y: 292.07); add: (Core.Point x: 411.919 y: 335.446); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure'); to: (stateTable at: 'Move Tool Select'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 504.465 y: 357.65); add: (Core.Point x: 703.215 y: 417.629); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure'); to: (stateTable at: 'Simple Select'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 457.307 y: 357.765); add: (Core.Point x: 405.144 y: 432.465); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Multiple Move Select'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 106.942 y: 447.913); add: (Core.Point x: 139 y: 588); add: (Core.Point x: 230.337 y: 588.81); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Multiple Select'); to: (stateTable at: 'Multiple Move Select'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 193.223 y: 412.268); add: (Core.Point x: 122.174 y: 421.686); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Multiple Move Select'); to: (stateTable at: 'Multiple Move Select'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 99.9792 y: 418.261); add: (Core.Point x: 128 y: 391); add: (Core.Point x: 119 y: 361); add: (Core.Point x: 93 y: 350); add: (Core.Point x: 65 y: (711/2)); add: (Core.Point x: 51 y: 382); add: (Core.Point x: 75.2931 y: 417.398); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Multiple Select'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 267.843 y: 422.729); add: (Core.Point x: 295.391 y: 582.877); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'change color menu'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[99])); points: ((Core.OrderedCollection new) add: (Core.Point x: 353.197 y: 175.192); add: (Core.Point x: 705.739 y: 144.793); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'reOpenEntitySelectionDialog'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[101])); points: ((Core.OrderedCollection new) add: (Core.Point x: 304.328 y: 190.509); add: (Core.Point x: 183.842 y: 226.75); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'clear selection'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[27])); points: ((Core.OrderedCollection new) add: (Core.Point x: 352.534 y: 174.912); add: (Core.Point x: 577.221 y: 125.561); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Tool Select'); to: (stateTable at: 'Simple Select'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 697.884 y: 422.168); add: (Core.Point x: 584 y: 466); add: (Core.Point x: 418.091 y: 433.211); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isManipulateForTabletEnabled'); to: (stateTable at: 'ManipulateForTablet Tool'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 714.761 y: 44.5308); add: (Core.Point x: 755.948 y: 55.8637); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isManipulateForTabletEnabled'); to: (stateTable at: 'isEntityForManipulationDefined'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 562.263 y: 49.5673); add: (Core.Point x: 407.569 y: 76.7255); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Manipulate Tool'); to: (stateTable at: 'isManipulateForTabletEnabled'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 390.74 y: 23.4883); add: (Core.Point x: 539.026 y: 32.1361); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'isClicOnSelectedFigure2'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 353.516 y: 192.84); add: (Core.Point x: 459.093 y: 237.465); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure2'); to: (stateTable at: 'Menu'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 585.032 y: 240.482); add: (Core.Point x: 745.236 y: 234.564); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure2'); to: (stateTable at: 'Reselect'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 536.873 y: 264.591); add: (Core.Point x: 658.123 y: 326.264); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Reselect'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 674.908 y: 321.361); add: (Core.Point x: 744.996 y: 238.374); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Manipulate Tool'
		put:
			(ToolState
				name: 'Manipulate Tool'
				command:
					[:tool :event | 
					tool cursor: Cursor fingerPointer.
					tool controller
						ifNotNil:
							[tool controller model createInstancesController
								ifNotNil:
									[tool controller model createInstancesController closeWithSpaceInterface]]]).
	Tool states
		at: 'Menu'
		put:
			(EndToolState
				name: 'Menu'
				command:
					[:tool :event | 
					| figures aPoint |
					aPoint := tool cursorPointFor: event.
					figures := tool allFiguresAtEvent: event.
					tool controller
						processManipulateMenuAt: event globalPoint
						local: aPoint
						forSelectedFigures: tool drawing selections
						localFigures: figures]).
	Tool states
		at: 'isEntityForManipulationDefined'
		put:
			(ToolState
				name: 'isEntityForManipulationDefined'
				command:
					[:tool :event | 
					tool controller isNil
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse:
							[tool controller model entityForManipulation isNil
								ifTrue: [tool valueAt: #condition put: false]
								ifFalse: [tool valueAt: #condition put: true]]]).
	Tool states
		at: 'setEntityForManipulationToDefault'
		put:
			(ToolState
				name: 'setEntityForManipulationToDefault'
				command:
					[:tool :event | tool controller model setEntityForManipulationToDefault]).
	Tool states
		at: 'nothing'
		put:
			(ToolState
				name: 'nothing'
				command: [:tool :event | ]).
	Tool states
		at: 'isShiftDown'
		put:
			(ToolState
				name: 'isShiftDown'
				command:
					[:tool :event | 
					tool sensor shiftDown
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	Tool states
		at: 'Multiple Select'
		put:
			(ToolState
				name: 'Multiple Select'
				command:
					[:tool :event | 
					| drawing figure figures |
					drawing := tool drawing.
					tool controller model entityForManipulation = #any
						ifTrue:
							[figure := tool figureAtEvent: event.
							(figure class = TrackHandle or: [figure class = IndexedTrackHandle])
								ifFalse: [drawing toggleSelection: figure]]
						ifFalse:
							[figures := tool allFiguresAtEvent: event.
							figures := figures
								select:
									[:f | f model entity class name = tool controller model entityForManipulation].
							figures isEmpty
								ifFalse: [figures do: [:fig | drawing toggleSelection: fig]]]]).
	Tool states
		at: 'End State'
		put:
			(EndToolState
				name: 'End State'
				command: [:tool :event | ]).
	Tool states
		at: 'Selection Tool Move Figure'
		put:
			(ToolState
				name: 'Selection Tool Move Figure'
				command:
					[:tool :event | 
					| delta newPoint |
					newPoint := tool cursorPointFor: event.
					delta := newPoint - (tool valueAt: #lastPoint).
					tool valueAt: #lastPoint put: newPoint.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isTranslatedBy: delta]]]).
	Tool states
		at: 'Selection Tool isMovedTo'
		put:
			(ToolState
				name: 'Selection Tool isMovedTo'
				command:
					[:tool :event | 
					| newPoint |
					newPoint := tool cursorPointFor: event.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isMovedTo: newPoint]].
					tool drawing clearSelections]).
	Tool states
		at: 'Move Tool Select'
		put:
			(ToolState
				name: 'Move Tool Select'
				command:
					[:tool :event | 
					| lastPoint |
					lastPoint := tool cursorPointFor: event.
					tool valueAt: #lastPoint put: lastPoint]).
	Tool states
		at: 'isClicOnSelectedFigure'
		put:
			(ToolState
				name: 'isClicOnSelectedFigure'
				command:
					[:tool :event | 
					(tool drawing selections isEmpty not
						and:
							[(tool allFiguresAtEvent: event)
								contains: [:fig | tool drawing selections includes: fig]])
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	Tool states
		at: 'Simple Select'
		put:
			(EndToolState
				name: 'Simple Select'
				command:
					[:tool :event | 
					| figures |
					figures := tool allFiguresAtEvent: event.
					tool controller model entityForManipulation = #any
						ifFalse:
							[figures := figures
								select:
									[:f | f model entity class name = tool controller model entityForManipulation]].
					figures isEmpty ifFalse: [tool drawing selection: figures last]]).
	Tool states
		at: 'Multiple Move Select'
		put:
			(ToolState
				name: 'Multiple Move Select'
				command:
					[:tool :event | 
					| drawing figure figures |
					drawing := tool drawing.
					tool controller model entityForManipulation = #any
						ifTrue:
							[figure := tool figureAtEvent: event.
							(figure class = TrackHandle or: [figure class = IndexedTrackHandle])
								ifFalse: [drawing toggleSelection: figure]]
						ifFalse:
							[figures := tool allFiguresAtEvent: event.
							figures := figures
								select:
									[:f | f model entity class name = tool controller model entityForManipulation].
							figures isEmpty
								ifFalse:
									[figures
										do:
											[:fig | (drawing selections includes: fig) ifFalse: [drawing toggleSelection: fig]]]]]).
	Tool states
		at: 'change color menu'
		put:
			(EndToolState
				name: 'change color menu'
				command:
					[:tool :event | 
					| aPoint |
					aPoint := tool cursorPointFor: event.
					tool controller
						processChangeFigureMenuAt: aPoint
						forSelectedFigures: tool drawing selections]).
	Tool states
		at: 'reOpenEntitySelectionDialog'
		put:
			(EndToolState
				name: 'reOpenEntitySelectionDialog'
				command:
					[:tool :event | 
					| keepSelected |
					tool controller model chooseEntityForManipulation.
					(tool drawing selections isEmpty not
						and: [tool controller model entityForManipulation ~= #any])
						ifTrue:
							[keepSelected := tool drawing selections
								select:
									[:f | f entityType name = tool controller model entityForManipulation].
							tool drawing clearSelections.
							keepSelected do: [:fig | tool drawing toggleSelection: fig]]]).
	Tool states
		at: 'clear selection'
		put:
			(EndToolState
				name: 'clear selection'
				command: [:tool :event | tool drawing clearSelections]).
	Tool states
		at: 'isManipulateForTabletEnabled'
		put:
			(ToolState
				name: 'isManipulateForTabletEnabled'
				command:
					[:tool :event | 
					tool valueAt: #condition put: false.
					tool controller
						ifNotNil:
							[:c | 
							c model isManipulateForTabletEnabled
								ifTrue: [tool valueAt: #condition put: true]]]).
	Tool states
		at: 'isClicOnSelectedFigure2'
		put:
			(ToolState
				name: 'isClicOnSelectedFigure2'
				command:
					[:tool :event | 
					(tool drawing selections isEmpty not
						and:
							[(tool allFiguresAtEvent: event)
								contains: [:fig | tool drawing selections includes: fig]])
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	Tool states
		at: 'Reselect'
		put:
			(ToolState
				name: 'Reselect'
				command:
					[:tool :event | 
					| drawing entityForManipulation figures |
					drawing := tool drawing.
					entityForManipulation := tool controller model entityForManipulation.
					drawing clearSelections.
					figures := tool allFiguresAtEvent: event.
					entityForManipulation ~= #any
						ifTrue:
							[figures := figures
								select: [:f | f model entity class name = entityForManipulation]].
					figures isEmpty
						ifFalse: [figures do: [:fig | drawing toggleSelection: fig]]]).
	(Tool stateFor: 'Selection Tool isMovedTo')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'isShiftDown')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'isClicOnSelectedFigure');
				onCondition: true
					goto: (Tool stateFor: 'Multiple Select');
				yourself).
	(Tool stateFor: 'Manipulate Tool')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isManipulateForTabletEnabled');
				yourself).
	(Tool stateFor: 'isManipulateForTabletEnabled')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'isEntityForManipulationDefined');
				onCondition: true
					goto: (Tool stateFor: 'ManipulateForTablet Tool');
				yourself).
	(Tool stateFor: 'Multiple Move Select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Multiple Move Select');
				yourself).
	(Tool stateFor: 'Multiple Move Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool isMovedTo');
				yourself).
	(Tool stateFor: 'nothing')
		keyPress:
			((CharacterTransitionTable new)
				forCharacters: (String fromIntegerArray: #[27])
					goto: (Tool stateFor: 'clear selection');
				forCharacters: (String fromIntegerArray: #[101])
					goto: (Tool stateFor: 'reOpenEntitySelectionDialog');
				forCharacters: (String fromIntegerArray: #[99])
					goto: (Tool stateFor: 'change color menu');
				yourself).
	(Tool stateFor: 'nothing')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isClicOnSelectedFigure2');
				yourself).
	(Tool stateFor: 'nothing')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isShiftDown');
				yourself).
	(Tool stateFor: 'setEntityForManipulationToDefault')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'nothing');
				yourself).
	(Tool stateFor: 'Reselect')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'isClicOnSelectedFigure')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'Simple Select');
				onCondition: true
					goto: (Tool stateFor: 'Move Tool Select');
				yourself).
	(Tool stateFor: 'isClicOnSelectedFigure2')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'Reselect');
				onCondition: true
					goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Multiple Select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Multiple Move Select');
				yourself).
	(Tool stateFor: 'Multiple Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'isEntityForManipulationDefined')
		immediate:
			((ConditionTransitionTable new)
				onCondition: true
					goto: (Tool stateFor: 'nothing');
				onCondition: false
					goto: (Tool stateFor: 'setEntityForManipulationToDefault');
				yourself).
	(Tool stateFor: 'Move Tool Select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'Move Tool Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Simple Select');
				yourself)