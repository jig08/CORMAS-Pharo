Obsolete
initializeMoveTool
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Move Tool'; instVarAt: 3 put: '[:tool :event | tool cursor: Cursor hand]'; instVarAt: 4 put: (Core.Point x: 301 y: 1); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | 
| figure figures aPoint|

aPoint := tool cursorPointFor: event.
tool drawing selections size <=1
 ifTrue:[

tool drawing selections size = 1
	ifTrue:[figure := tool drawing selection ]
	ifFalse:[

	figures := tool allFiguresAtEvent: event.
	figures size >1
		ifTrue:[figure := Dialog choose: ''Select an entity'' 
				fromList: (figures collect: [:v| v model entity class name asString , ''_'', v model entity id printString])
				values: figures
				lines: 8
				cancel: nil]
		ifFalse:[figure := tool figureAtEvent: event]].

	(figure isNil or:[(figure isKindOf: CormasNS.Kernel.SpaceView)]) ifFalse:[
		tool controller processManipulateMenuAt: event globalPoint
		local: aPoint
		for: figure]]
ifFalse:[
]
]'; instVarAt: 4 put: (Core.Point x: 562 y: 72); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isEntityForManipulationDefined'; instVarAt: 3 put: '[:tool :event |  
tool controller isNil 
	ifTrue:[ tool valueAt: #condition put: true]
	ifFalse:[
		tool controller model entityForManipulation isNil
			ifTrue:[ tool valueAt: #condition put: false]
			ifFalse:[tool valueAt: #condition put: true]]]'; instVarAt: 4 put: (Core.Point x: 244 y: 52); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'openEntitySelectionDialog'; instVarAt: 3 put: '[:tool :event | 
tool controller model chooseEntityForManipulation ]'; instVarAt: 4 put: (Core.Point x: 70 y: 89); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'nothing'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 319 y: 137); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isShiftDown'; instVarAt: 3 put: '[:tool :event |
tool sensor shiftDown
			ifTrue:[ tool valueAt: #condition put: true]
			ifFalse:[tool valueAt: #condition put: false]]'; instVarAt: 4 put: (Core.Point x: 287 y: 245); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Multiple Select'; instVarAt: 3 put: '[:tool :event | 
| drawing  figure figures | 
drawing := tool drawing.
tool controller model entityForManipulation =#any
	ifTrue:[figure := tool figureAtEvent: event.
			(figure class = Refactory.HotDraw.TrackHandle or: [(figure class = Refactory.HotDraw.IndexedTrackHandle)])
				ifFalse:[drawing toggleSelection: figure]]

	ifFalse:[figures := tool allFiguresAtEvent: event.
			figures := figures select:[: f| f model entity class name = tool controller model entityForManipulation].
	figures isEmpty
		ifFalse:[figures do:[:fig|
					(drawing selections includes: fig) ifFalse:[drawing toggleSelection: fig]]]
		
		]
]'; instVarAt: 4 put: (Core.Point x: 57 y: 327); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 146 y: 520); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Move Figure'; instVarAt: 3 put: '[:tool :event | 
| delta newPoint |
newPoint := tool cursorPointFor: event.
delta := newPoint - (tool valueAt: #lastPoint).
tool valueAt: #lastPoint put: newPoint.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isTranslatedBy: delta]]]'; instVarAt: 4 put: (Core.Point x: 448 y: 445); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool isMovedTo'; instVarAt: 3 put: '[:tool :event | 
| newPoint |
newPoint := tool cursorPointFor: event.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isMovedTo: newPoint]].
tool drawing clearSelections]'; instVarAt: 4 put: (Core.Point x: 444 y: 532); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Move Tool Select'; instVarAt: 3 put: '[:tool :event | 
|  lastPoint   | 
lastPoint := tool cursorPointFor: event.
tool valueAt: #lastPoint put: lastPoint.
	]'; instVarAt: 4 put: (Core.Point x: 492 y: 361); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isClicOnSelectedFigure'; instVarAt: 3 put: '[:tool :event | 
(tool drawing selections isEmpty not and:[(tool allFiguresAtEvent: event) 
contains:[:fig | tool drawing selections includes: fig]])
	ifTrue:[tool valueAt: #condition put: true]
	ifFalse:[tool valueAt: #condition put: false]]	'; instVarAt: 4 put: (Core.Point x: 322 y: 314); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Simple Select'; instVarAt: 3 put: '[:tool :event | 
|   figures | 

		figures := (tool allFiguresAtEvent: event) select:[: f| f model entity class name = tool controller model entityForManipulation].
		figures isEmpty
			ifFalse:[tool drawing selection: figures first]
	]'; instVarAt: 4 put: (Core.Point x: 286 y: 399); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Tool'); to: (stateTable at: 'isEntityForManipulationDefined'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 331.934 y: 32.794); add: (Core.Point x: 331.198 y: 51.2692); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isEntityForManipulationDefined'); to: (stateTable at: 'openEntitySelectionDialog'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 309.681 y: 82.583); add: (Core.Point x: 231.846 y: 108.147); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 370.313 y: 146.406); add: (Core.Point x: 578.657 y: 103.635); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isEntityForManipulationDefined'); to: (stateTable at: 'nothing'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 338.978 y: 83.6825); add: (Core.Point x: 343.392 y: 136.174); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'openEntitySelectionDialog'); to: (stateTable at: 'nothing'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 138.815 y: 120.625); add: (Core.Point x: 319.468 y: 157.973); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'isShiftDown'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 317.423 y: 152.642); add: (Core.Point x: 314.294 y: 244.743); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isShiftDown'); to: (stateTable at: 'Multiple Select'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 286.292 y: 262.103); add: (Core.Point x: 122.57 y: 326.312); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Multiple Select'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 122.531 y: 359.0); add: (Core.Point x: 179.631 y: 518.994); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 586.268 y: 448.421); add: (Core.Point x: 592 y: 431); add: (Core.Point x: 649 y: 405); add: (Core.Point x: 672 y: 458); add: (Core.Point x: 559.85 y: 475.553); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool isMovedTo'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 526.639 y: 476.955); add: (Core.Point x: 525.761 y: 531.431); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool isMovedTo'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 524.031 y: 531.432); add: (Core.Point x: 214.514 y: 532.119); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Tool Select'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 523.432 y: 391.936); add: (Core.Point x: 531.638 y: 444.251); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isShiftDown'); to: (stateTable at: 'isClicOnSelectedFigure'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 365.609 y: 257.687); add: (Core.Point x: 375.102 y: 314.359); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure'); to: (stateTable at: 'Move Tool Select'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 424.303 y: 344.561); add: (Core.Point x: 507.258 y: 365.288); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure'); to: (stateTable at: 'Simple Select'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 382.985 y: 345.583); add: (Core.Point x: 343.476 y: 398.469); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Simple Select'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 312.562 y: 429.625); add: (Core.Point x: 197.606 y: 521.438); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Move Tool'
		put:
			(ToolState
				name: 'Move Tool'
				command: [:tool :event | tool cursor: Cursor hand]).
	Tool states
		at: 'Menu'
		put:
			(EndToolState
				name: 'Menu'
				command:
					[:tool :event | 
					| figure figures aPoint |
					aPoint := tool cursorPointFor: event.
					tool drawing selections size <= 1
						ifTrue:
							[tool drawing selections size = 1
								ifTrue: [figure := tool drawing selection]
								ifFalse:
									[figures := tool allFiguresAtEvent: event.
									figures size > 1
										ifTrue:
											[figure := Dialog
												choose: 'Select an entity'
												fromList:
													(figures
														collect:
															[:v | v model entity class name asString , '_' , v model entity id printString])
												values: figures
												lines: 8
												cancel: nil]
										ifFalse: [figure := tool figureAtEvent: event]].
							(figure isNil or: [figure isKindOf: SpaceView])
								ifFalse:
									[tool controller
										processManipulateMenuAt: event globalPoint
										local: aPoint
										for: figure]]
						ifFalse: []]).
	Tool states
		at: 'isEntityForManipulationDefined'
		put:
			(ToolState
				name: 'isEntityForManipulationDefined'
				command:
					[:tool :event | 
					tool controller isNil
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse:
							[tool controller model entityForManipulation isNil
								ifTrue: [tool valueAt: #condition put: false]
								ifFalse: [tool valueAt: #condition put: true]]]).
	Tool states
		at: 'openEntitySelectionDialog'
		put:
			(ToolState
				name: 'openEntitySelectionDialog'
				command:
					[:tool :event | tool controller model chooseEntityForManipulation]).
	Tool states
		at: 'nothing'
		put:
			(ToolState
				name: 'nothing'
				command: [:tool :event | ]).
	Tool states
		at: 'isShiftDown'
		put:
			(ToolState
				name: 'isShiftDown'
				command:
					[:tool :event | 
					tool sensor shiftDown
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	Tool states
		at: 'Multiple Select'
		put:
			(ToolState
				name: 'Multiple Select'
				command:
					[:tool :event | 
					| drawing figure figures |
					drawing := tool drawing.
					tool controller model entityForManipulation = #any
						ifTrue:
							[figure := tool figureAtEvent: event.
							(figure class = TrackHandle or: [figure class = IndexedTrackHandle])
								ifFalse: [drawing toggleSelection: figure]]
						ifFalse:
							[figures := tool allFiguresAtEvent: event.
							figures := figures
								select:
									[:f | f model entity class name = tool controller model entityForManipulation].
							figures isEmpty
								ifFalse:
									[figures
										do:
											[:fig | (drawing selections includes: fig) ifFalse: [drawing toggleSelection: fig]]]]]).
	Tool states
		at: 'End State'
		put:
			(EndToolState
				name: 'End State'
				command: [:tool :event | ]).
	Tool states
		at: 'Selection Tool Move Figure'
		put:
			(ToolState
				name: 'Selection Tool Move Figure'
				command:
					[:tool :event | 
					| delta newPoint |
					newPoint := tool cursorPointFor: event.
					delta := newPoint - (tool valueAt: #lastPoint).
					tool valueAt: #lastPoint put: newPoint.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isTranslatedBy: delta]]]).
	Tool states
		at: 'Selection Tool isMovedTo'
		put:
			(ToolState
				name: 'Selection Tool isMovedTo'
				command:
					[:tool :event | 
					| newPoint |
					newPoint := tool cursorPointFor: event.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isMovedTo: newPoint]].
					tool drawing clearSelections]).
	Tool states
		at: 'Move Tool Select'
		put:
			(ToolState
				name: 'Move Tool Select'
				command:
					[:tool :event | 
					| lastPoint |
					lastPoint := tool cursorPointFor: event.
					tool valueAt: #lastPoint put: lastPoint]).
	Tool states
		at: 'isClicOnSelectedFigure'
		put:
			(ToolState
				name: 'isClicOnSelectedFigure'
				command:
					[:tool :event | 
					(tool drawing selections isEmpty not
						and:
							[(tool allFiguresAtEvent: event)
								contains: [:fig | tool drawing selections includes: fig]])
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	Tool states
		at: 'Simple Select'
		put:
			(ToolState
				name: 'Simple Select'
				command:
					[:tool :event | 
					| figures |
					figures := (tool allFiguresAtEvent: event)
						select:
							[:f | f model entity class name = tool controller model entityForManipulation].
					figures isEmpty ifFalse: [tool drawing selection: figures first]]).
	(Tool stateFor: 'Multiple Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Move Tool Select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'isEntityForManipulationDefined')
		immediate:
			((ConditionTransitionTable new)
				onCondition: true
					goto: (Tool stateFor: 'nothing');
				onCondition: false
					goto: (Tool stateFor: 'openEntitySelectionDialog');
				yourself).
	(Tool stateFor: 'isShiftDown')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'isClicOnSelectedFigure');
				onCondition: true
					goto: (Tool stateFor: 'Multiple Select');
				yourself).
	(Tool stateFor: 'Selection Tool isMovedTo')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool isMovedTo');
				yourself).
	(Tool stateFor: 'Simple Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Move Tool')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isEntityForManipulationDefined');
				yourself).
	(Tool stateFor: 'nothing')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isShiftDown');
				yourself).
	(Tool stateFor: 'nothing')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'isClicOnSelectedFigure')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'Simple Select');
				onCondition: true
					goto: (Tool stateFor: 'Move Tool Select');
				yourself).
	(Tool stateFor: 'openEntitySelectionDialog')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'nothing');
				yourself)