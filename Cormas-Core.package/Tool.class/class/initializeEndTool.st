tool states
initializeEndTool
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End Tool'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 171 y: 71); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Create End Figure'; instVarAt: 3 put: '[:tool :event | 
tool drawing add: 
	(EndFigure createAt: (tool cursorPointFor: event))]'; instVarAt: 4 put: (Core.Point x: 136 y: 237); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'End Tool'); to: (stateTable at: 'Create End Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 209.358 y: 101.635); add: (Core.Point x: 208.969 y: 236.063); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'End Tool'
		put:
			(ToolState
				name: 'End Tool'
				command: [:tool :event | ]).
	Tool states
		at: 'Create End Figure'
		put:
			(EndToolState
				name: 'Create End Figure'
				command:
					[:tool :event | tool drawing add: (EndFigure createAt: (tool cursorPointFor: event))]).
	(Tool stateFor: 'End Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create End Figure');
				yourself)