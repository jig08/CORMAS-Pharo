tool states
initializeInspectTool
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Inspect Tool'; instVarAt: 3 put: '[:tool :event | 
	tool controller 
		ifNotNil:[tool controller model entityForManipulation:nil.
				tool controller model drawing activeAttribute
					ifNil:[Cursor normal beCursor]
					ifNotNil:[Cursor caret beCursor].
				tool controller model createInstancesController 
					ifNotNil:[tool controller model createInstancesController closeWithSpaceInterface]].
	]'; instVarAt: 4 put: (Core.Point x: 228 y: 28); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 23 y: 345); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'InspectorOnEntity'; instVarAt: 3 put: '[:tool :event | 
| figure figures |
figures := tool allFiguresAtEvent: event.
figures isEmpty ifFalse:[
figures size >1
ifTrue:[figure := Dialog choose: ''Which entity do you want to inspect?'' 
fromList: (figures collect: [:v| v model entity class name asString , ''_'', v model entity id printString])
values: figures
lines: 8
cancel: nil]
ifFalse:[figure := figures at:1].
(figure isNil or:[(figure isKindOf: CormasNS.Kernel.SpaceView)]) ifFalse:[
tool controller model openEntityInspectorOn: figure model entity]]]'; instVarAt: 4 put: (Core.Point x: 192 y: 236); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event |
| figure figures aPoint|
aPoint := tool cursorPointFor: event.
figures := tool allFiguresAtEvent: event.
tool sensor shiftDown ifTrue:[figures := figures select:[:f| (f entityType inheritsFrom: CormasNS.Kernel.SpatialEntity) not]].
figures size >1
ifTrue:[
	tool controller processMenuAt: event globalPoint
		local: aPoint
		forMultipleFigures: figures]
ifFalse:[
	figure := tool figureAtEvent: event.
	(figure isNil or:[(figure isKindOf: CormasNS.Kernel.SpaceView)]) ifFalse:[
		tool controller processMenuAt: event globalPoint
		local: aPoint
		for: figure]]]'; instVarAt: 4 put: (Core.Point x: 400 y: 316); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'change value'; instVarAt: 3 put: '[:tool :event | 
| figure figures |
tool drawing activeAttribute isNil ifFalse:[

	figures := (tool allFiguresAtEvent: event) select:[:f| f entityType inheritsFrom: CormasNS.Kernel.SpatialEntityElement]. 
	figures isEmpty ifFalse:[
		figure := (figures sorted:[:x :y| x model entity id < y model entity id]) first.
		tool drawing changeAttributeOf: figure]]]'; instVarAt: 4 put: (Core.Point x: 36 y: 172); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'clicToInspect'; instVarAt: 3 put: '[:tool :event |

 tool controller model clicToInspect ]'; instVarAt: 4 put: (Core.Point x: 434 y: 104); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'clicToChange_newValue'; instVarAt: 3 put: '[:tool :event |
| spInt |
spInt := tool controller model.
(spInt activeSpatialEntity notNil and:[ spInt drawing activeAttribute isNil not])
	ifTrue: [	spInt drawing clicToChange]]
'; instVarAt: 4 put: (Core.Point x: 389 y: 16); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Inspect Tool'); to: (stateTable at: 'InspectorOnEntity'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #doubleClick; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 266.418 y: 59.8623); add: (Core.Point x: 261.219 y: 235.094); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'InspectorOnEntity'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 258.641 y: 267.516); add: (Core.Point x: 254 y: 347); add: (Core.Point x: 59.6963 y: 344.216); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Inspect Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 295.894 y: 55.7118); add: (Core.Point x: 425.578 y: 315.423); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'change value'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 68.3126 y: 203.841); add: (Core.Point x: 64.6666 y: 344.233); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Inspect Tool'); to: (stateTable at: 'change value'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 228.969 y: 37.7745); add: (Core.Point x: 76 y: 44); add: (Core.Point x: 74.6638 y: 171.273); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'change value'); to: (stateTable at: 'change value'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 115.507 y: 178.941); add: (Core.Point x: 189 y: 176); add: (Core.Point x: 176 y: 202); add: (Core.Point x: 100.675 y: 202.142); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Inspect Tool'); to: (stateTable at: 'clicToInspect'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[27])); points: ((Core.OrderedCollection new) add: (Core.Point x: 309.642 y: 45.1224); add: (Core.Point x: 441.999 y: 109.252); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Inspect Tool'); to: (stateTable at: 'clicToChange_newValue'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[13])); points: ((Core.OrderedCollection new) add: (Core.Point x: 309.555 y: 44.9766); add: (Core.Point x: 388.379 y: 29.1248); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Inspect Tool'
		put:
			(ToolState
				name: 'Inspect Tool'
				command:
					[:tool :event | 
					tool controller
						ifNotNil:
							[tool controller model entityForManipulation: nil.
							tool controller model drawing activeAttribute
								ifNil: [Cursor normal beCursor]
								ifNotNil: [Cursor caret beCursor].
							tool controller model createInstancesController
								ifNotNil:
									[tool controller model createInstancesController closeWithSpaceInterface]]]).
	Tool states
		at: 'End State'
		put:
			(EndToolState
				name: 'End State'
				command: [:tool :event | ]).
	Tool states
		at: 'InspectorOnEntity'
		put:
			(ToolState
				name: 'InspectorOnEntity'
				command:
					[:tool :event | 
					| figure figures |
					figures := tool allFiguresAtEvent: event.
					figures isEmpty
						ifFalse:
							[figures size > 1
								ifTrue:
									[figure := Dialog
										choose: 'Which entity do you want to inspect?'
										fromList:
											(figures
												collect:
													[:v | v model entity class name asString , '_' , v model entity id printString])
										values: figures
										lines: 8
										cancel: nil]
								ifFalse: [figure := figures at: 1].
							(figure isNil or: [figure isKindOf: SpaceView])
								ifFalse:
									[tool controller model openEntityInspectorOn: figure model entity]]]).
	Tool states
		at: 'Menu'
		put:
			(EndToolState
				name: 'Menu'
				command:
					[:tool :event | 
					| figure figures aPoint |
					aPoint := tool cursorPointFor: event.
					figures := tool allFiguresAtEvent: event.
					tool sensor shiftDown
						ifTrue:
							[figures := figures
								select: [:f | (f entityType inheritsFrom: CMSpatialEntity) not]].
					figures size > 1
						ifTrue:
							[tool controller
								processMenuAt: event globalPoint
								local: aPoint
								forMultipleFigures: figures]
						ifFalse:
							[figure := tool figureAtEvent: event.
							(figure isNil or: [figure isKindOf: SpaceView])
								ifFalse:
									[tool controller
										processMenuAt: event globalPoint
										local: aPoint
										for: figure]]]).
	Tool states
		at: 'change value'
		put:
			(ToolState
				name: 'change value'
				command:
					[:tool :event | 
					| figure figures |
					tool drawing activeAttribute isNil
						ifFalse:
							[figures := (tool allFiguresAtEvent: event)
								select: [:f | f entityType inheritsFrom: SpatialEntityElement].
							figures isEmpty
								ifFalse:
									[figure := (figures sorted: [:x :y | x model entity id < y model entity id])
										first.
									tool drawing changeAttributeOf: figure]]]).
	Tool states
		at: 'clicToInspect'
		put:
			(EndToolState
				name: 'clicToInspect'
				command: [:tool :event | tool controller model clicToInspect]).
	Tool states
		at: 'clicToChange_newValue'
		put:
			(EndToolState
				name: 'clicToChange_newValue'
				command:
					[:tool :event | 
					| spInt |
					spInt := tool controller model.
					(spInt activeSpatialEntity notNil
						and: [spInt drawing activeAttribute isNil not])
						ifTrue: [spInt drawing clicToChange]]).
	(Tool stateFor: 'Inspect Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'change value');
				yourself).
	(Tool stateFor: 'Inspect Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Inspect Tool')
		keyPress:
			((CharacterTransitionTable new)
				forCharacters: (String fromIntegerArray: #[13])
					goto: (Tool stateFor: 'clicToChange_newValue');
				forCharacters: (String fromIntegerArray: #[27])
					goto: (Tool stateFor: 'clicToInspect');
				yourself).
	(Tool stateFor: 'Inspect Tool')
		doubleClick:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'InspectorOnEntity');
				yourself).
	(Tool stateFor: 'InspectorOnEntity')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'change value')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'change value')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'change value');
				yourself)