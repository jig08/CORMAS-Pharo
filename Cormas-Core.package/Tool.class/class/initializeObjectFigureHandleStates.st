tool states
initializeObjectFigureHandleStates
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Object Figure Handle'; instVarAt: 3 put: (Text string: '[:tool :event | 
| handle object cursorPoint figure |
cursorPoint := tool cursorPointFor: event.
handle := tool figureAtEvent: event.
object := handle model object.
figure := tool drawing components detect: [:each | each class = ObjectFigure and: [each object == object]] 
	ifNone: [nil].
figure isNil ifTrue: [
		figure := ObjectFigure object: object at: cursorPoint.
		tool drawing add: figure.
		tool drawing add: 
			(handle owner 
				connectFromPoint: handle model offset 
				to: figure 
				at: cursorPoint).
		tool valueAt: #figure put: figure]
	ifFalse: [tool drawing add: (handle owner 
			connectFromPoint: handle model offset 
			to: figure at: cursorPoint).
		tool changeToState: (Tool stateFor: ''End State'') event: event]
]' runs: (RunArray runs: #(770) values: #(nil))); instVarAt: 4 put: (Point x: 196 y: 46); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Object Figure Move'; instVarAt: 3 put: (Text string: '[:tool :event | 
(tool valueAt: #figure) translateTo: (tool cursorPointFor: event)]' runs: (RunArray runs: #(83) values: #(nil))); instVarAt: 4 put: (Point x: 87 y: 156); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Cancel Figure Creation'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 329 y: 156); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 302 y: 280); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Object Figure Handle'); to: (stateTable at: 'Object Figure Move'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 240 y: 76); add: (Point x: 162 y: 156); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Object Figure Move'); to: (stateTable at: 'Object Figure Move'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 146 y: 187); add: (Point x: 145 y: 229); add: (Point x: 100 y: 233); add: (Point x: 132 y: 186); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Object Figure Move'); to: (stateTable at: 'End State'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 173 y: 186); add: (Point x: 316 y: 281); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Object Figure Handle'); to: (stateTable at: 'Cancel Figure Creation'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 281 y: 76); add: (Point x: 381 y: 156); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Object Figure Handle'
		put:
			(ToolState
				name: 'Object Figure Handle'
				command:
					[:tool :event | 
					| handle object cursorPoint figure |
					cursorPoint := tool cursorPointFor: event.
					handle := tool figureAtEvent: event.
					object := handle model object.
					figure := tool drawing components
						detect:
							[:each | each class = ObjectFigure and: [each object == object]]
						ifNone: [nil].
					figure isNil
						ifTrue:
							[figure := ObjectFigure object: object at: cursorPoint.
							tool drawing add: figure.
							tool drawing
								add:
									(handle owner
										connectFromPoint: handle model offset
										to: figure
										at: cursorPoint).
							tool valueAt: #figure put: figure]
						ifFalse:
							[tool drawing
								add:
									(handle owner
										connectFromPoint: handle model offset
										to: figure
										at: cursorPoint).
							tool
								changeToState: (Tool stateFor: 'End State')
								event: event]]).
	Tool states
		at: 'Object Figure Move'
		put:
			(ToolState
				name: 'Object Figure Move'
				command:
					[:tool :event | (tool valueAt: #figure) translateTo: (tool cursorPointFor: event)]).
	(Tool stateFor: 'Object Figure Handle')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Cancel Figure Creation');
				yourself).
	(Tool stateFor: 'Object Figure Handle')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Object Figure Move');
				yourself).
	(Tool stateFor: 'Object Figure Move')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Object Figure Move')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Object Figure Move');
				yourself)