tool states
initializeManipulateForTabletTool
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'ManipulateForTablet Tool'; instVarAt: 3 put: '[:tool :event |]'; instVarAt: 4 put: (Core.Point x: 193 y: 4); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | 
|  figures aPoint|

aPoint := tool cursorPointFor: event.
figures := tool allFiguresAtEvent: event.
		tool controller processManipulateMenuAt: event globalPoint
		local: aPoint
		forSelectedFigures: (tool drawing selections )
		localFigures:figures]'; instVarAt: 4 put: (Core.Point x: 609 y: 320); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isEntityForManipulationDefined'; instVarAt: 3 put: '[:tool :event |  
tool controller isNil 
	ifTrue:[ tool valueAt: #condition put: true]
	ifFalse:[
		tool controller model entityForManipulation isNil
			ifTrue:[ tool valueAt: #condition put: false]
			ifFalse:[tool valueAt: #condition put: true]]]'; instVarAt: 4 put: (Core.Point x: 246 y: 73); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'setEntityForManipulationToDefault'; instVarAt: 3 put: '[:tool :event | 
tool controller model setEntityForManipulationToDefault ]'; instVarAt: 4 put: (Core.Point x: 1 y: 201); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'nothing'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 296 y: 197); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Simple Select 2'; instVarAt: 3 put: '[:tool :event | 
| figures | 
figures := (tool allFiguresAtEvent: event).
tool controller model entityForManipulation =#any
	ifFalse:[ figures := figures select:[: f| f model entity class name = tool controller model entityForManipulation]].
figures isEmpty ifFalse:[figure := figures last.
tool drawing selection = figure ifFalse:
[tool drawing selection: figure]]]'; instVarAt: 4 put: (Core.Point x: 434 y: 275); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'change color menu'; instVarAt: 3 put: '[:tool :event | 
| aPoint|

aPoint := tool cursorPointFor: event.
tool controller processChangeFigureMenuAt: aPoint
	forSelectedFigures: (tool drawing selections )]'; instVarAt: 4 put: (Core.Point x: 738 y: 259); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'reOpenEntitySelectionDialog'; instVarAt: 3 put: '[:tool :event |
| keepSelected |
tool controller model chooseEntityForManipulation.
(tool drawing selections isEmpty not and:[tool controller model entityForManipulation ~=#any])
	ifTrue:[	keepSelected := tool drawing selections select:[:f| f entityType name = tool controller model entityForManipulation].
			tool drawing clearSelections.
			keepSelected do:[:fig| tool drawing toggleSelection: fig]]]'; instVarAt: 4 put: (Core.Point x: 741 y: 64); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'clear selection'; instVarAt: 3 put: '[:tool :event | 
tool drawing clearSelections]'; instVarAt: 4 put: (Core.Point x: 771 y: 146); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isClicOnSelectedFigure'; instVarAt: 3 put: '[:tool :event | 
(tool drawing selections isEmpty not and:[(tool allFiguresAtEvent: event) 
contains:[:fig | tool drawing selections includes: fig]])
	ifTrue:[tool valueAt: #condition put: true]
	ifFalse:[tool valueAt: #condition put: false]]	'; instVarAt: 4 put: (Core.Point x: 113 y: 286); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Move Tool Select'; instVarAt: 3 put: '[:tool :event | 
|  lastPoint   | 
lastPoint := tool cursorPointFor: event.
tool valueAt: #lastPoint put: lastPoint.
	]'; instVarAt: 4 put: (Core.Point x: 87 y: 399); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool isMovedTo'; instVarAt: 3 put: '[:tool :event | 
| newPoint |
newPoint := tool cursorPointFor: event.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isMovedTo: newPoint]]]'; instVarAt: 4 put: (Core.Point x: 260 y: 556); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Move Figure'; instVarAt: 3 put: '[:tool :event | 
| delta newPoint |
newPoint := tool cursorPointFor: event.
delta := newPoint - (tool valueAt: #lastPoint).
tool valueAt: #lastPoint put: newPoint.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isTranslatedBy: delta]]]'; instVarAt: 4 put: (Core.Point x: 156 y: 487); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 28 y: 385); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'nothing2'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 73 y: 331); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'ManipulateForTablet Tool'); to: (stateTable at: 'isEntityForManipulationDefined'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 327.95 y: 31.6658); add: (Core.Point x: 337.599 y: 72.381); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isEntityForManipulationDefined'); to: (stateTable at: 'setEntityForManipulationToDefault'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 264.327 y: 99.0529); add: (Core.Point x: 107.273 y: 200.169); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isEntityForManipulationDefined'); to: (stateTable at: 'nothing'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 330.517 y: 104.745); add: (Core.Point x: 332.589 y: 196.385); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'setEntityForManipulationToDefault'); to: (stateTable at: 'nothing'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 209.699 y: 218.658); add: (Core.Point x: 295.191 y: 213.533); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'change color menu'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[102])); points: ((Core.OrderedCollection new) add: (Core.Point x: 335.776 y: 198.377); add: (Core.Point x: 771.303 y: 259.288); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'reOpenEntitySelectionDialog'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[101])); points: ((Core.OrderedCollection new) add: (Core.Point x: 335.715 y: 198.364); add: (Core.Point x: 770.004 y: 92.5369); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'clear selection'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[27])); points: ((Core.OrderedCollection new) add: (Core.Point x: 335.858 y: 197.969); add: (Core.Point x: 777.975 y: 151.954); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'Simple Select 2'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 329.779 y: 228.848); add: (Core.Point x: 446.084 y: 278.608); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Simple Select 2'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 525.8 y: 301.064); add: (Core.Point x: 615.078 y: 322.861); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Simple Select 2'); to: (stateTable at: 'Simple Select 2'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 453.492 y: 303.627); add: (Core.Point x: 430 y: 374); add: (Core.Point x: 487 y: 375); add: (Core.Point x: 462.629 y: 305.703); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'isClicOnSelectedFigure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 308.797 y: 227.023); add: (Core.Point x: 249.758 y: 293.297); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure'); to: (stateTable at: 'Move Tool Select'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 180.578 y: 317.987); add: (Core.Point x: 148.087 y: 398.174); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Tool Select'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 183.088 y: 425.567); add: (Core.Point x: 272.184 y: 487.328); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 162.166 y: 494.999); add: (Core.Point x: 95 y: 491); add: (Core.Point x: 126 y: 550); add: (Core.Point x: 227.001 y: 518.538); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool isMovedTo'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 310.794 y: 511.665); add: (Core.Point x: 372.003 y: 556.362); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure'); to: (stateTable at: 'nothing2'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 158.602 y: 316.594); add: (Core.Point x: 124.634 y: 335.307); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing2'); to: (stateTable at: 'End'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 87.0938 y: 360.844); add: (Core.Point x: 57.145 y: 388.727); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'ManipulateForTablet Tool'
		put:
			(ToolState
				name: 'ManipulateForTablet Tool'
				command: [:tool :event | ]).
	Tool states
		at: 'Menu'
		put:
			(EndToolState
				name: 'Menu'
				command:
					[:tool :event | 
					| figures aPoint |
					aPoint := tool cursorPointFor: event.
					figures := tool allFiguresAtEvent: event.
					tool controller
						processManipulateMenuAt: event globalPoint
						local: aPoint
						forSelectedFigures: tool drawing selections
						localFigures: figures]).
	Tool states
		at: 'isEntityForManipulationDefined'
		put:
			(ToolState
				name: 'isEntityForManipulationDefined'
				command:
					[:tool :event | 
					tool controller isNil
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse:
							[tool controller model entityForManipulation isNil
								ifTrue: [tool valueAt: #condition put: false]
								ifFalse: [tool valueAt: #condition put: true]]]).
	Tool states
		at: 'setEntityForManipulationToDefault'
		put:
			(ToolState
				name: 'setEntityForManipulationToDefault'
				command:
					[:tool :event | tool controller model setEntityForManipulationToDefault]).
	Tool states
		at: 'nothing'
		put:
			(ToolState
				name: 'nothing'
				command: [:tool :event | ]).
	Tool states
		at: 'Simple Select 2'
		put:
			(ToolState
				name: 'Simple Select 2'
				command:
					[:tool :event | 
					| figures |
					figures := tool allFiguresAtEvent: event.
					tool controller model entityForManipulation = #any
						ifFalse:
							[figures := figures
								select:
									[:f | f model entity class name = tool controller model entityForManipulation]].
					figures isEmpty
						ifFalse:
							[figure := figures last.
							tool drawing selection = figure
								ifFalse: [tool drawing selection: figure]]]).
	Tool states
		at: 'change color menu'
		put:
			(EndToolState
				name: 'change color menu'
				command:
					[:tool :event | 
					| aPoint |
					aPoint := tool cursorPointFor: event.
					tool controller
						processChangeFigureMenuAt: aPoint
						forSelectedFigures: tool drawing selections]).
	Tool states
		at: 'reOpenEntitySelectionDialog'
		put:
			(EndToolState
				name: 'reOpenEntitySelectionDialog'
				command:
					[:tool :event | 
					| keepSelected |
					tool controller model chooseEntityForManipulation.
					(tool drawing selections isEmpty not
						and: [tool controller model entityForManipulation ~= #any])
						ifTrue:
							[keepSelected := tool drawing selections
								select:
									[:f | f entityType name = tool controller model entityForManipulation].
							tool drawing clearSelections.
							keepSelected do: [:fig | tool drawing toggleSelection: fig]]]).
	Tool states
		at: 'clear selection'
		put:
			(EndToolState
				name: 'clear selection'
				command: [:tool :event | tool drawing clearSelections]).
	Tool states
		at: 'isClicOnSelectedFigure'
		put:
			(ToolState
				name: 'isClicOnSelectedFigure'
				command:
					[:tool :event | 
					(tool drawing selections isEmpty not
						and:
							[(tool allFiguresAtEvent: event)
								contains: [:fig | tool drawing selections includes: fig]])
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	Tool states
		at: 'Move Tool Select'
		put:
			(ToolState
				name: 'Move Tool Select'
				command:
					[:tool :event | 
					| lastPoint |
					lastPoint := tool cursorPointFor: event.
					tool valueAt: #lastPoint put: lastPoint]).
	Tool states
		at: 'Selection Tool isMovedTo'
		put:
			(EndToolState
				name: 'Selection Tool isMovedTo'
				command:
					[:tool :event | 
					| newPoint |
					newPoint := tool cursorPointFor: event.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isMovedTo: newPoint]]]).
	Tool states
		at: 'Selection Tool Move Figure'
		put:
			(ToolState
				name: 'Selection Tool Move Figure'
				command:
					[:tool :event | 
					| delta newPoint |
					newPoint := tool cursorPointFor: event.
					delta := newPoint - (tool valueAt: #lastPoint).
					tool valueAt: #lastPoint put: newPoint.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isTranslatedBy: delta]]]).
	Tool states
		at: 'End'
		put:
			(EndToolState
				name: 'End'
				command: [:tool :event | ]).
	Tool states
		at: 'nothing2'
		put:
			(ToolState
				name: 'nothing2'
				command: [:tool :event | ]).
	(Tool stateFor: 'Simple Select 2')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Simple Select 2');
				yourself).
	(Tool stateFor: 'Simple Select 2')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'isClicOnSelectedFigure')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'nothing2');
				onCondition: true
					goto: (Tool stateFor: 'Move Tool Select');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		yellowButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool isMovedTo');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'ManipulateForTablet Tool')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isEntityForManipulationDefined');
				yourself).
	(Tool stateFor: 'nothing')
		keyPress:
			((CharacterTransitionTable new)
				forCharacters: (String fromIntegerArray: #[27])
					goto: (Tool stateFor: 'clear selection');
				forCharacters: (String fromIntegerArray: #[101])
					goto: (Tool stateFor: 'reOpenEntitySelectionDialog');
				forCharacters: (String fromIntegerArray: #[102])
					goto: (Tool stateFor: 'change color menu');
				yourself).
	(Tool stateFor: 'nothing')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isClicOnSelectedFigure');
				yourself).
	(Tool stateFor: 'nothing')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Simple Select 2');
				yourself).
	(Tool stateFor: 'setEntityForManipulationToDefault')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'nothing');
				yourself).
	(Tool stateFor: 'Move Tool Select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'nothing2')
		yellowButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End');
				yourself).
	(Tool stateFor: 'isEntityForManipulationDefined')
		immediate:
			((ConditionTransitionTable new)
				onCondition: true
					goto: (Tool stateFor: 'nothing');
				onCondition: false
					goto: (Tool stateFor: 'setEntityForManipulationToDefault');
				yourself)