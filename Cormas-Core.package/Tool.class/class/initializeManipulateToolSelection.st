Obsolete
initializeManipulateToolSelection
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Manipulate Tool Select'; instVarAt: 3 put: '[:tool :event | 
| drawing lastPoint figure | 
drawing := tool drawing.
lastPoint := tool cursorPointFor: event.
tool valueAt: #lastPoint put: lastPoint.
figure := drawing figureAt: lastPoint.
(figure class = Refactory.HotDraw.TrackHandle or:[(figure class = Refactory.HotDraw.TentativePositionHandle) or:[(figure class = Refactory.HotDraw.IndexedTrackHandle)]])
 ifFalse:[
	
		tool sensor shiftDown
			ifTrue: [(drawing selections isEmpty not and:[drawing selections first model entity class = figure model entity class])
	 ifTrue:[drawing toggleSelection: figure]]
			ifFalse: [(drawing isSelected: figure) ifFalse: [drawing selection: figure]].
		tool controller model updateEntitiesSelectionWith: drawing selections lastFigureSelected: figure]]'; instVarAt: 4 put: (Core.Point x: 46 y: 51); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 55 y: 253); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Manipulate Tool Select'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 116.895 y: 82.668); add: (Core.Point x: 90.1051 y: 252.335); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Manipulate Tool Select'
		put:
			(ToolState
				name: 'Manipulate Tool Select'
				command:
					[:tool :event | 
					| drawing lastPoint figure |
					drawing := tool drawing.
					lastPoint := tool cursorPointFor: event.
					tool valueAt: #lastPoint put: lastPoint.
					figure := drawing figureAt: lastPoint.
					(figure class = TrackHandle
						or:
							[figure class = TentativePositionHandle
								or: [figure class = IndexedTrackHandle]])
						ifFalse:
							[tool sensor shiftDown
								ifTrue:
									[(drawing selections isEmpty not
										and:
											[drawing selections first model entity class = figure model entity class])
										ifTrue: [drawing toggleSelection: figure]]
								ifFalse:
									[(drawing isSelected: figure) ifFalse: [drawing selection: figure]].
							tool controller model
								updateEntitiesSelectionWith: drawing selections
								lastFigureSelected: figure]]).
	Tool states
		at: 'End State'
		put:
			(EndToolState
				name: 'End State'
				command: [:tool :event | ]).
	(Tool stateFor: 'Manipulate Tool Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself)